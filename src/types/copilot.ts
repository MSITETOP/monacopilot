import type {
  CompletionModel,
  CompletionProvider,
  CompletionResponse,
} from './completion';
import {
  CursorPosition,
  EditorCancellationToken,
  EditorModel,
  Monaco,
} from './monaco';

/**
 * Options for configuring the Copilot instance.
 */
export interface CopilotOptions {
  /**
   * The completion provider to use (e.g., 'openai', 'anthropic', 'groq').
   * If not specified, a default provider will be used.
   */
  provider?: CompletionProvider;

  /**
   * The specific model to use for completions.
   * Must be compatible with the chosen provider.
   * If not specified, a default model will be used.
   */
  model?: CompletionModel;
  /**
   * Configuration for a custom model to be used for completions.
   * This allows integration of custom or third-party models not directly supported by the main providers.
   *
   * @property {function} config - A function that configures the custom model.
   * @property {function} response - A function that transforms the custom model's response.
   */
  customModel?: CustomModel;
}

export type CustomModel = {
  /**
   * A function to configure the custom model.
   * This function takes the API key and the prompt data and returns the configuration for the custom model.
   *
   * @param {string} apiKey - The API key for authentication.
   * @param {Object} prompt - An object containing 'system' and 'user' messages generated by Monacopilot.
   * @returns {Object} An object that may include:
   *   - endpoint: The URL for the custom model's API (required)
   *   - headers: Additional HTTP headers for the API request (optional)
   *   - body: The request body data for the custom model API (optional)
   */
  config: CustomModelConfig;
  /**
   * A function to transform the response from the custom model.
   * This function takes the raw response from the custom model API
   * and converts it into a CompletionResponse object.
   *
   * @param response - The raw response from the custom model API.
   *                   The type is 'unknown' because different APIs
   *                   may return responses in different formats.
   * @returns A CompletionResponse object containing the completion text
   *          or an error message. The completion should be the actual
   *          text to be inserted or used as the completion, without
   *          any metadata or additional structure.
   */
  response: CustomModelResponse;
};

export type CustomModelConfig = (
  apiKey: string,
  prompt: {
    system: string;
    user: string;
  },
) => {
  /**
   * The URL endpoint for the custom model's API.
   * This is where the completion request will be sent.
   */
  endpoint: Endpoint;
  /**
   * Additional HTTP headers to include with the API request.
   * Use this to add any necessary authentication or custom headers.
   */
  headers?: Record<string, string>;
  /**
   * The data to be sent in the request body to the custom model API.
   * This should contain all necessary parameters for generating a completion.
   */
  body?: Record<string, unknown>;
};

export type CustomModelResponse = (response: unknown) => CompletionResponse;

export type Endpoint = string;
export type Filename = string;
export type Technologies = string[];
export type ExternalContext = {
  /**
   * The relative path from the current editing code in the editor to an external file.
   *
   * Examples:
   * - To include a file `utils.js` in the same directory, set as `./utils.js`.
   * - To include a file `utils.js` in the parent directory, set as `../utils.js`.
   * - To include a file `utils.js` in the child directory, set as `./child/utils.js`.
   */
  path: string;

  /**
   * The content of the external file as a string.
   */
  content: string;
}[];

export interface RegisterCopilotOptions {
  /**
   * Language of the current model
   */
  language: string;
  /**
   * The API endpoint where you started the completion service.
   */
  endpoint: Endpoint;
  /**
   * The name of the file you are editing. This is used to provide more relevant completions based on the file's purpose.
   * For example, if you are editing a file named `utils.js`, the completions will be more relevant to utility functions.
   */
  filename?: Filename;
  /**
   * The technologies (libraries, frameworks, etc.) you want to use for the completion.
   * This can provide technology-specific completions.
   * If you don't specify a technology, the completion will be specific to the language (provided as the `language`).
   *
   * @example
   * ['react', 'nextjs', 'tailwindcss', 'tanstack/react-query']
   * ['tensorflow', 'keras', 'numpy', 'pandas']
   * etc.
   */
  technologies?: Technologies;
  /**
   * Helps to give more relevant completions based on the full context.
   * You can include things like the contents/codes of other files in the same workspace.
   */
  externalContext?: ExternalContext;
}
export interface CopilotRegistration {
  /**
   * Deregisters the Copilot from the Monaco editor.
   * This should be called when the Copilot is no longer needed.
   */
  deregister: () => void;
}

export interface InlineCompletionHandlerParams {
  monaco: Monaco;
  model: EditorModel;
  position: CursorPosition;
  token: EditorCancellationToken;

  isCompletionAccepted: boolean;
  onShowCompletion: () => void;
  options: RegisterCopilotOptions;
}
