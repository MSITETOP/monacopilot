import fs from 'fs/promises';
import path from 'path';
import {fileURLToPath} from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const THEMES_DIR_PATH = '../themes';
const THEMES_FILE_PATH = '../src/themes.ts';

const readAndProcessThemes = async () => {
  const themesDir = path.resolve(__dirname, THEMES_DIR_PATH);

  try {
    const files = await fs.readdir(themesDir);

    const themeJsonFiles = await Promise.all(
      files.map(async file => {
        const content = await fs.readFile(path.join(themesDir, file), 'utf-8');
        return {[file]: content};
      }),
    );

    // Renaming files and creating content for themes.ts
    let themesFileContent = '';

    for (const file of themeJsonFiles) {
      const fileName = Object.keys(file)[0];
      const newFileName =
        fileName
          .replace(/\.(json|JSON)$/, '')
          .replace(/[\s_,.()]+/g, '-')
          .replace(/-+$/, '')
          .toLowerCase() + '.json';

      // Rename the file asynchronously
      await fs.rename(
        path.join(themesDir, fileName),
        path.join(themesDir, newFileName),
      );

      const themeName = newFileName.replace(/\.json$/, '');

      const json = JSON.parse(Object.values(file)[0]);
      themesFileContent += `"${themeName}": ${JSON.stringify(json)},\n`;
    }

    // Writing to themes.ts
    const themesFilePath = path.resolve(__dirname, THEMES_FILE_PATH);
    const themesFileData = `
      import { EditorThemeData } from './types/common';

      interface CustomThemeCollection {
        [key: string]: EditorThemeData;
      }

      /**
       * Themes for the Rich Monaco Editor.
       * This file is automatically generated by the 'generate-themes' script.
       * Do not manually modify this file. Instead, add themes to the 'themes' directory and run the script.
       */

      export default {
        ${themesFileContent}
      } as const satisfies CustomThemeCollection;
    `;

    await fs.writeFile(themesFilePath, themesFileData);
    console.log('Themes processed successfully!');
  } catch (error) {
    console.error('Error processing themes:', error);
  }
};

readAndProcessThemes();
